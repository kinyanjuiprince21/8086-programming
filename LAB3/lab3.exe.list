EMU8086 GENERATED LISTING. MACHINE CODE <- SOURCE.
 
lab3.exe -- emu8086 assembler version: 4.08  
 
[ 09/08/2023  --  14:21:01 ] 
 
===================================================================================================
[LINE]     LOC: MACHINE CODE                          SOURCE
===================================================================================================
 
[   1]        :                                       .MODEL medium
[   2]        :                                       
[   3]        :                                       DATA SEGMENT
[   4]    0000: 30                                    VALUE DB 30H
[   5]    0001: 39                                    DECVALUE DB 39H
[   6]    0002: 00                                    var     db  ?
[   7]    0003: 00                                    TIMER DB 0
[   8]    0004: 45 4E 54 45 52 3A 31 2E 55 70 20 43   Menu        db "ENTER:1.Up Counter$"
                6F 75 6E 74 65 72 24                
[   9]    0017: 32 2E 44 6F 77 6E 20 43 6F 75 6E 74   Menu2       db "2.Down Counter$"
                65 72 24                            
[  10]    0026: 20 45 43 45 20 4C 41 42 24            Header      db " ECE LAB$"
[  11]    002F: 55 50 20 43 4F 55 4E 54 45 52 3A 24   UPCOUNTER DB "UP COUNTER:$"
                                                    
[  12]    003B: 44 4F 57 4E 20 43 4F 55 4E 54 45 52   DOWNCOUNTER DB "DOWN COUNTER:$"
                3A 24                               
[  13]    0049: 48 41 4C 54                           STRING DB "HALT"
[  14]    004D: 00                                    PORTA_VAL DB 0		 ;variable to keep track of portB data
[  15]    004E: 00                                    PORTB_VAL DB 0
[  16]    004F: 00                                    PORTC_VAL DB 0
[  17]    0050: 00                                    KEY       DB ?
[  18]        :                                       ;port addresses
[  19]        :                                       PORTA EQU 00H 	;PORTA IS CONNECTED TO THE D7-D0
[  20]        :                                       	PORTB EQU 02H 	;PORTB0 IS RW, PORTB1 IS RS, PORTB2 IS EN
[  21]        :                                       	PORTC EQU 04H
[  22]        :                                       	PCW   EQU 06H	;PORT FOR IO CONTROL
[  23]        :                                       
[  24]        :                                       ENDS
[  25]        :                                       
[  26]        :                                       STACK SEGMENT
[  27]    0060: 00 00 00 00 00 00 00 00 00 00 00 00   DW   128  DUP(0)
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00 00 00 00 00 00 00 00 00 
                00 00 00 00                         
[  28]        :                                       ENDS
[  29]        :                                       
[  30]        :                                       CODE SEGMENT
[  31]    0160:                                       START:
[  32]        :                                       ;define IO ports
[  33]    0160: BA 06 00                              MOV DX,PCW
[  34]    0163: B0 88                                 MOV AL,10001000b   ;to make all ports output (MODE 0)
[  35]    0165: EE                                    OUT DX,AL
[  36]        :                                       
[  37]    0166: B9 60 EA                              MOV CX,60000
[  38]    0169: E8 71 02                              	CALL DELAY
[  39]        :                                       	
[  40]    016C: E8 73 02                              	CALL LCD_INIT
[  41]        :                                       	
[  42]    016F: B8 00 00                              MOV AX, @DATA
[  43]    0172: 8E D8                                 MOV DS, AX
[  44]        :                                       
[  45]    0174:                                       proc BEGIN
[  46]    0174: B2 01                                 MOV DL,1
[  47]    0176: B6 01                                 MOV DH,1
[  48]    0178: E8 11 03                              CALL LCD_SET_CUR
[  49]    017B: BE 04 00                              LEA SI,Menu
[  50]    017E: E8 FA 02                              CALL LCD_PRINTSTR
[  51]        :                                       
[  52]    0181: B2 02                                 MOV DL,2
[  53]    0183: B6 01                                 MOV DH,1
[  54]    0185: E8 04 03                              CALL LCD_SET_CUR
[  55]    0188: BE 17 00                              LEA SI,Menu2
[  56]    018B: E8 ED 02                              CALL LCD_PRINTSTR
[  57]        :                                       
[  58]    018E: E8 EF 00                              CALL get_KeyPress
[  59]    0191: E8 00 00                              CALL select
[  60]        :                                       endp
[  61]        :                                       
[  62]        :                                       ;-----MENU SELECTION------------------
[  63]    0194:                                       select:
[  64]    0194: 80 3E 02 00 01                        cmp var, 1
[  65]    0199: 74 0E                                 je s1
[  66]    019B: 80 3E 02 00 02                        cmp var, 2
[  67]    01A0: 74 0A                                 je s2
[  68]    01A2: 80 3E 02 00 03                        cmp var, 3
[  69]    01A7: 74 06                                 je s3
[  70]        :                                       
[  71]    01A9: E8 07 00                              s1: call UP
[  72]    01AC: E8 50 00                              s2: call DOWN
[  73]    01AF: E8 99 00                              s3: call Exit
[  74]    01B2: C3                                    ret
[  75]        :                                       endp
[  76]        :                                       
[  77]    01B3:                                       proc UP
[  78]    01B3: B2 01                                 MOV DL,1
[  79]    01B5: B6 01                                 	MOV DH,1
[  80]    01B7: E8 D2 02                              	CALL LCD_SET_CUR
[  81]        :                                       	
[  82]    01BA: BE 2F 00                              	LEA SI,UPCOUNTER
[  83]    01BD: E8 BB 02                              	CALL LCD_PRINTSTR
[  84]        :                                       	
[  85]    01C0: B2 02                                 MOV DL,2
[  86]    01C2: B6 01                                 	MOV DH,1
[  87]    01C4: E8 C5 02                              	CALL LCD_SET_CUR
[  88]        :                                       	
[  89]    01C7: 8A 26 00 00                           MOV AH, VALUE       ;move value into AH to be printed
[  90]    01CB: E8 87 02                              	CALL LCD_WRITE_CHAR ;function to print on lcd
[  91]    01CE: B9 50 C3                              MOV CX,50000
[  92]    01D1: E8 09 02                              	CALL DELAY
[  93]    01D4: FE 06 00 00                           INC VALUE
[  94]    01D8: FE 06 03 00                           INC TIMER
[  95]    01DC: E8 70 02                              CALL LCD_CLEAR
[  96]    01DF: 80 3E 03 00 09                        CMP TIMER, 9
[  97]    01E4: 76 CD                                 JBE UP
[  98]        :                                       
[  99]    01E6: B2 01                                 MOV DL,1
[ 100]    01E8: B6 01                                 	MOV DH,1
[ 101]    01EA: E8 9F 02                              	CALL LCD_SET_CUR
[ 102]        :                                       	
[ 103]    01ED: B9 60 EA                              MOV CX,60000
[ 104]    01F0: E8 EA 01                              	CALL DELAY
[ 105]        :                                       	
[ 106]    01F3: E8 59 02                              	CALL LCD_CLEAR
[ 107]        :                                       	
[ 108]    01F6: C6 06 03 00 00                        	MOV TIMER, 0
[ 109]    01FB: E8 76 FF                              	CALL BEGIN
[ 110]    01FE: F4                                    	HLT
[ 111]        :                                       	
[ 112]        :                                       endp	
[ 113]        :                                       
[ 114]    01FF:                                       proc DOWN
[ 115]    01FF: B2 01                                 MOV DL,1
[ 116]    0201: B6 01                                 	MOV DH,1
[ 117]    0203: E8 86 02                              	CALL LCD_SET_CUR
[ 118]        :                                       	
[ 119]    0206: BE 3B 00                              	LEA SI,DOWNCOUNTER
[ 120]    0209: E8 6F 02                              	CALL LCD_PRINTSTR
[ 121]        :                                       	
[ 122]    020C: B2 02                                 MOV DL,2
[ 123]    020E: B6 01                                 	MOV DH,1
[ 124]    0210: E8 79 02                              	CALL LCD_SET_CUR
[ 125]        :                                       	
[ 126]    0213: FE 0E 01 00                           	DEC DECVALUE
[ 127]    0217: 8A 26 01 00                           MOV AH, DECVALUE       ;move remainder into AH to be printed
[ 128]    021B: E8 37 02                              	CALL LCD_WRITE_CHAR ;function to print on lcd
[ 129]    021E: B9 50 C3                              MOV CX,50000
[ 130]    0221: E8 B9 01                              	CALL DELAY
[ 131]    0224: FE 06 03 00                           INC TIMER
[ 132]    0228: E8 24 02                              CALL LCD_CLEAR
[ 133]    022B: 80 3E 03 00 09                        CMP TIMER, 9
[ 134]    0230: 76 CD                                 JBE DOWN
[ 135]        :                                       
[ 136]    0232: B2 01                                 MOV DL,1
[ 137]    0234: B6 01                                 	MOV DH,1
[ 138]    0236: E8 53 02                              	CALL LCD_SET_CUR
[ 139]        :                                       	
[ 140]        :                                       	
[ 141]    0239: B9 60 EA                              	MOV CX,60000
[ 142]    023C: E8 9E 01                              	CALL DELAY
[ 143]        :                                       	
[ 144]        :                                       	
[ 145]    023F: E8 0D 02                              	CALL LCD_CLEAR
[ 146]        :                                       	
[ 147]    0242: C6 06 03 00 00                        	MOV TIMER, 0
[ 148]    0247: E8 2A FF                              	CALL BEGIN
[ 149]        :                                       	
[ 150]    024A: F4                                    	HLT
[ 151]        :                                       endp
[ 152]        :                                       
[ 153]    024B:                                       proc Exit
[ 154]        :                                       
[ 155]    024B: E8 01 02                              CALL LCD_CLEAR
[ 156]    024E: E8 23 FF                              CALL BEGIN
[ 157]    0251: B9 60 EA                              MOV CX,60000
[ 158]    0254: E8 86 01                              CALL DELAY
[ 159]    0257: E8 F5 01                              CALL LCD_CLEAR
[ 160]    025A: B2 01                                 MOV DL,1
[ 161]    025C: B6 02                                 MOV DH,2
[ 162]    025E: E8 2B 02                              CALL LCD_SET_CUR
[ 163]    0261: E8 1C 00                              CALL get_KeyPress
[ 164]    0264: F4                                    HLT
[ 165]        :                                       
[ 166]        :                                       endp
[ 167]        :                                       
[ 168]        :                                       ;sends data to output port and saves them in a variable
[ 169]    0265:                                       PROC OUT_A
[ 170]        :                                       ;input: AL
[ 171]        :                                       ;output: none
[ 172]    0265: 52                                    	PUSH DX
[ 173]    0266: BA 00 00                              	MOV DX,PORTA
[ 174]    0269: EE                                    	OUT DX,AL  ;output content of AL to address in DX
[ 175]    026A: 5A                                    	POP DX
[ 176]    026B: C3                                    	RET	
[ 177]        :                                       ENDP OUT_A
[ 178]        :                                       
[ 179]    026C:                                       PROC OUT_B
[ 180]        :                                       ;input: AL
[ 181]        :                                       ;output: PORTB_VAL	
[ 182]    026C: 52                                    	PUSH DX
[ 183]    026D: BA 02 00                              	MOV DX,PORTB
[ 184]    0270: EE                                    	OUT DX,AL
[ 185]    0271: A2 4E 00                              	MOV PORTB_VAL,AL
[ 186]    0274: 5A                                    	POP DX
[ 187]    0275: C3                                    	RET
[ 188]        :                                       ENDP OUT_B
[ 189]        :                                       
[ 190]        :                                       ;---------------------------------
[ 191]        :                                       ;Punction to output value in port C
[ 192]        :                                       ;input: AL
[ 193]        :                                       ;output: PORTC_VAL
[ 194]    0276:                                       proc OUT_C	
[ 195]    0276: 52                                    	PUSH DX
[ 196]    0277: BA 04 00                              	MOV DX,PORTC
[ 197]    027A: EE                                    	OUT DX,AL
[ 198]    027B: A2 4F 00                              	MOV PORTC_VAL,AL
[ 199]    027E: 5A                                    	POP DX
[ 200]    027F: C3                                    	RET
[ 201]        :                                       endp OUT_C
[ 202]        :                                       
[ 203]        :                                       ;----------------------------------
[ 204]        :                                       ;-----------------------------------------------;
[ 205]        :                                       ;                                               ;
[ 206]        :                                       ;        KEY PRESS FUNCTION                     ;
[ 207]        :                                       ;                                               ;
[ 208]        :                                       ;-----------------------------------------------;
[ 209]    0280:                                       proc get_KeyPress
[ 210]    0280: 51                                    push cx
[ 211]    0281:                                       keypad:
[ 212]        :                                       ; MOV CX,00FFH            ; fill in the value of CX with 00ffH
[ 213]    0281: B0 FE                                 MOV AL,11111110b        ; value = 1111 1110, set column 0 low
[ 214]    0283: BA 04 00                              MOV DX,PORTC            ; mov PORTC to DX
[ 215]    0286: EE                                    OUT DX,AL               ;Give this value to PORTA
[ 216]        :                                       
[ 217]    0287:                                       COLUMN0:
[ 218]        :                                       	 ;Check ROW0
[ 219]    0287: E4 04                                 IN AL,PORTC            ; Get PORTB value
[ 220]    0289: A2 50 00                              MOV KEY,AL
[ 221]    028C: 80 3E 50 00 EE                        CMP KEY,11101110b      ; If PORTB =1111 1110 - button 1 Keypad is pressed?
[ 222]    0291: 75 14                                 JNE ROW1               ; If not, go to ROW1
[ 223]    0293: B9 20 4E                              MOV CX,20000           ; delay abit
[ 224]    0296: E8 44 01                              CALL DELAY
[ 225]    0299: B4 31                                 MOV AH,'1'             ; Output '1'
[ 226]    029B: E8 B7 01                              CALL LCD_WRITE_CHAR
[ 227]    029E: B4 01                                 	 MOV AH,1
[ 228]    02A0: 88 26 02 00                           	 MOV VAR,AH             ;store the key pressed
[ 229]    02A4: E9 34 01                              JMP GOE                 ; continue loop
[ 230]        :                                       
[ 231]    02A7:                                       ROW1:
[ 232]    02A7: 3C DE                                 CMP AL,11011110B       ; Is PORTB == 11011110B  or (4)Keypad button pressed?
[ 233]    02A9: 75 14                                 JNE ROW2               ; If not, go to ROW2 of column 1
[ 234]    02AB: B9 20 4E                              MOV CX,20000
[ 235]    02AE: E8 2C 01                              	 CALL DELAY
[ 236]    02B1: B4 34                                 MOV AH,'4'
[ 237]    02B3: E8 9F 01                              	 CALL LCD_WRITE_CHAR
[ 238]    02B6: B4 04                                 MOV AH,4
[ 239]    02B8: 88 26 02 00                           	 MOV VAR,AH
[ 240]    02BC: E9 1C 01                              JMP GOE                 ; Continue looop
[ 241]        :                                       
[ 242]    02BF:                                       ROW2:
[ 243]    02BF: 3C BE                                 CMP AL,10111110B       ; Is PORTB == 10111110B or 7 Keypad button pressed?
[ 244]    02C1: 75 14                                 JNE ROW3               ; If not, go to ROW3
[ 245]    02C3: B9 20 4E                              MOV CX,20000
[ 246]    02C6: E8 14 01                              	 CALL DELAY
[ 247]    02C9: B4 37                                 	 MOV AH,'7'
[ 248]    02CB: E8 87 01                              	 CALL LCD_WRITE_CHAR
[ 249]    02CE: B4 07                                 MOV AH,7
[ 250]    02D0: 88 26 02 00                           	 MOV VAR,AH
[ 251]    02D4: E9 04 01                              JMP GOE                 ; Go to GO
[ 252]        :                                       
[ 253]    02D7:                                       ROW3:
[ 254]    02D7: 3C 7E                                 CMP AL,01111110B           ; Is PORTB == 01111110B or keypad star button pressed?
[ 255]    02D9: 75 14                                 JNE GO                 ; continue loop
[ 256]    02DB: B9 20 4E                              MOV CX,20000
[ 257]    02DE: E8 FC 00                              	 CALL DELAY
[ 258]    02E1: B4 2A                                 MOV AH,'*'
[ 259]    02E3: E8 6F 01                              CALL LCD_WRITE_CHAR
[ 260]    02E6: B4 0B                                 MOV AH,11
[ 261]    02E8: 88 26 02 00                           	 MOV VAR,AH
[ 262]    02EC: E9 EC 00                              	 JMP GOE
[ 263]        :                                       
[ 264]    02EF:                                       GO:
[ 265]        :                                       ;LOOP COLUMN0             ; Looping to COLUMN1 is CX
[ 266]        :                                       
[ 267]    02EF: B9 FF 00                              MOV CX,00FFH            ; Initialize counter
[ 268]    02F2: B0 FD                                 MOV AL,11111101B             ; value = 1111 1101, set column 1 low
[ 269]    02F4: BA 04 00                              MOV DX,PORTC            ; enter PORTA to DX
[ 270]    02F7: EE                                    OUT DX,AL               ; Give this value to PORTA
[ 271]        :                                       
[ 272]    02F8:                                       COLUMN1:
[ 273]        :                                       
[ 274]    02F8: E4 04                                 IN AL,PORTC
[ 275]    02FA: A2 50 00                              MOV KEY,AL
[ 276]    02FD: 80 3E 50 00 ED                        CMP KEY,11101101B      ; Is PORTB == 11101101B or 2 Keypad button pressed?
[ 277]    0302: 75 14                                 JNE ROW11             ; If not, go to ROW12
[ 278]    0304: B9 20 4E                              MOV CX,20000
[ 279]    0307: E8 D3 00                              	 CALL DELAY
[ 280]    030A: B4 32                                 MOV AH,'2'
[ 281]    030C: E8 46 01                              	 CALL LCD_WRITE_CHAR
[ 282]    030F: B4 02                                 	 MOV AH,2
[ 283]    0311: 88 26 02 00                           	 MOV VAR,AH
[ 284]    0315: E9 C3 00                              JMP GOE
[ 285]        :                                       
[ 286]    0318:                                       ROW11:
[ 287]    0318: 3C FD                                 CMP AL,0FDH            ; Is PORTB == 0FDH or 5 Keypad button pressed?
[ 288]    031A: 80 3E 50 00 DD                        CMP KEY,11011101B
[ 289]    031F: 75 14                                 JNE ROW21              ; If not, go to ROW22
[ 290]    0321: B9 20 4E                              MOV CX,20000
[ 291]    0324: E8 B6 00                              	 CALL DELAY
[ 292]    0327: B4 35                                 	 MOV AH,'5'
[ 293]    0329: E8 29 01                              	 CALL LCD_WRITE_CHAR
[ 294]    032C: B4 05                                 	 MOV AH,5
[ 295]    032E: 88 26 02 00                           	 MOV VAR,AH
[ 296]    0332: E9 A6 00                              JMP GOE
[ 297]        :                                       
[ 298]    0335:                                       ROW21:
[ 299]    0335: 3C BD                                 CMP AL,10111101B            ; Is PORTB == 0F10111101BBH or keypad 8 keypad being pressed?
[ 300]    0337: 75 14                                 JNE ROW31             ;If not, go to ROW32
[ 301]    0339: B9 20 4E                              MOV CX,20000
[ 302]    033C: E8 9E 00                              	 CALL DELAY
[ 303]    033F: B4 38                                 	 MOV AH,'8'
[ 304]    0341: E8 11 01                              	 CALL LCD_WRITE_CHAR
[ 305]    0344: B4 08                                 	 MOV AH,8
[ 306]    0346: 88 26 02 00                           	 MOV VAR,AH
[ 307]    034A: E9 8E 00                              JMP GOE                ; continue loop
[ 308]        :                                       
[ 309]    034D:                                       ROW31:
[ 310]    034D: 3C 7D                                 CMP AL,01111101B           ; Is PORTB == 01111101B or keypad 0 keypad being pressed?
[ 311]    034F: 75 13                                 JNE GO2                ; If not, go to GO2
[ 312]    0351: B9 20 4E                              MOV CX,20000
[ 313]    0354: E8 86 00                              	 CALL DELAY
[ 314]    0357: B4 30                                 	 MOV AH,'0'
[ 315]    0359: E8 F9 00                              	 CALL LCD_WRITE_CHAR
[ 316]    035C: B4 00                                 	 MOV AH,0
[ 317]    035E: 88 26 02 00                           	 MOV VAR,AH
[ 318]    0362: EB 77                                 JMP GOE
[ 319]        :                                       
[ 320]    0364:                                       GO2:
[ 321]        :                                       ;LOOP COLUMN1            ; Looping to COLUMN2 is CX
[ 322]        :                                       
[ 323]    0364: B9 FF 00                              MOV CX,00FFH            ; fill in the value of CX with 00ffH
[ 324]    0367: B0 FB                                 MOV AL,11111011B             ; value = 1111 1011, set column 2 low
[ 325]    0369: BA 04 00                              MOV DX,PORTC            ; enter PORTC to DX
[ 326]    036C: EE                                    OUT DX,AL               ; Give this value to PORTC
[ 327]        :                                       
[ 328]    036D:                                       COLUMN2:
[ 329]        :                                       
[ 330]    036D: E4 04                                 IN AL,PORTC            ; Get PORTB value
[ 331]    036F: A2 50 00                              MOV KEY,AL
[ 332]    0372: 80 3E 50 00 EB                        CMP KEY,11101011B      ; Is PORTB == 11101011B or button 3 Keypad is pressed?
[ 333]    0377: 75 13                                 JNE ROW12             ; If not, go to ROW13
[ 334]    0379: B9 20 4E                              MOV CX,20000
[ 335]    037C: E8 5E 00                              	 CALL DELAY
[ 336]    037F: B4 33                                 	 MOV AH,'3'
[ 337]    0381: E8 D1 00                              	 CALL LCD_WRITE_CHAR
[ 338]    0384: B4 03                                 	 MOV AH,3
[ 339]    0386: 88 26 02 00                           	 MOV VAR,AH
[ 340]    038A: EB 4F                                 JMP GOE                ; Continue loop
[ 341]        :                                       
[ 342]    038C:                                       ROW12:
[ 343]    038C: 80 3E 50 00 DB                        CMP KEY,11011011B    ; Is PORTB == 11011011B or 6 Keypad button pressed?
[ 344]    0391: 75 13                                 JNE ROW22            ;If not, go to ROW23
[ 345]    0393: B9 20 4E                              MOV CX,20000
[ 346]    0396: E8 44 00                              	 CALL DELAY
[ 347]    0399: B4 36                                 	 MOV AH,'6'
[ 348]    039B: E8 B7 00                              	 CALL LCD_WRITE_CHAR
[ 349]    039E: B4 06                                 	 MOV AH,6
[ 350]    03A0: 88 26 02 00                           	 MOV VAR,AH
[ 351]    03A4: EB 35                                 JMP GOE                ; continue loop
[ 352]        :                                       
[ 353]    03A6:                                       ROW22:
[ 354]    03A6: 80 3E 50 00 BB                        CMP KEY,10111011B     ; Is PORTB == 10111011B or keypad 9 key pressed?
[ 355]    03AB: 75 13                                 JNE ROW32             ; If not, go to ROW33
[ 356]    03AD: B9 20 4E                              MOV CX,20000
[ 357]    03B0: E8 2A 00                              	 CALL DELAY
[ 358]    03B3: B4 39                                 	 MOV AH,'9'
[ 359]    03B5: E8 9D 00                              	 CALL LCD_WRITE_CHAR
[ 360]    03B8: B4 09                                 	 MOV AH,9
[ 361]    03BA: 88 26 02 00                           	 MOV VAR,AH
[ 362]    03BE: EB 1B                                 JMP GOE                ; Continue loop
[ 363]        :                                       
[ 364]    03C0:                                       ROW32:               ; Is PORTB == 0F7H or Keypad # button pressed?
[ 365]    03C0: 80 3E 50 00 7B                        CMP KEY,01111011B
[ 366]    03C5: 75 11                                 JNE GO3
[ 367]    03C7: B9 20 4E                              MOV CX,20000
[ 368]    03CA: E8 10 00                              CALL DELAY
[ 369]    03CD: A0 02 00                              MOV AL,VAR
[ 370]        :                                       ;PUSH AX
[ 371]    03D0: B4 16                                 MOV AH,22
[ 372]    03D2: 88 26 02 00                           MOV VAR,AH
[ 373]    03D6: EB 03                                 JMP GOE
[ 374]        :                                       
[ 375]    03D8:                                       GO3:
[ 376]        :                                       ;LOOP COLUMN2            ; Looping to COLUMN2 by CX
[ 377]    03D8: E9 A6 FE                              JMP keypad               ; Repeat the program again
[ 378]        :                                       
[ 379]    03DB:                                       GOE:
[ 380]        :                                       ;CMP VAR,22
[ 381]        :                                       ;JNE keypad
[ 382]        :                                       ;POP AX
[ 383]        :                                       ;MOV VAR,AL
[ 384]    03DB: 59                                    pop cx
[ 385]    03DC: C3                                    ret
[ 386]        :                                       endp
[ 387]        :                                       	
[ 388]        :                                       ;end of main procedure
[ 389]        :                                       
[ 390]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 391]        :                                       ;                                    ;
[ 392]        :                                       ;		LCD function library.        ;
[ 393]        :                                       ;                                    ;
[ 394]        :                                       ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
[ 395]    03DD:                                       PROC DELAY
[ 396]        :                                       ;input: CX, this value controls the delay. CX=50 means 1ms
[ 397]    03DD: E3 02                                 	JCXZ @DELAY_END
[ 398]    03DF:                                       	@DEL_LOOP:
[ 399]    03DF: E2 FE                                 	LOOP @DEL_LOOP	
[ 400]    03E1:                                       	@DELAY_END:
[ 401]    03E1: C3                                    	RET
[ 402]        :                                       ENDP DELAY
[ 403]        :                                       
[ 404]        :                                       ; LCD initialization
[ 405]    03E2:                                       PROC LCD_INIT
[ 406]        :                                       ;input: none
[ 407]        :                                       ;output: none
[ 408]        :                                       
[ 409]        :                                       ;make RS=En=RW=0
[ 410]    03E2: B0 00                                 	MOV AL,0
[ 411]    03E4: E8 85 FE                              	CALL OUT_B;OUT_B subroutine to output the value of AL to the appropriate port
[ 412]        :                                       ;delay 20ms
[ 413]    03E7: B9 E8 03                              	MOV CX,1000
[ 414]    03EA: E8 F0 FF                              	CALL DELAY
[ 415]        :                                       ;reset sequence
[ 416]    03ED: B4 30                                 	MOV AH,30H
[ 417]    03EF: E8 2F 00                              	CALL LCD_CMD
[ 418]    03F2: B9 FA 00                              	MOV CX,250
[ 419]    03F5: E8 E5 FF                              	CALL DELAY
[ 420]        :                                       	
[ 421]    03F8: B4 30                                 	MOV AH,30H
[ 422]    03FA: E8 24 00                              	CALL LCD_CMD
[ 423]    03FD: B9 32 00                              	MOV CX,50
[ 424]    0400: E8 DA FF                              	CALL DELAY
[ 425]        :                                       	
[ 426]    0403: B4 30                                 	MOV AH,30H
[ 427]    0405: E8 19 00                              	CALL LCD_CMD
[ 428]    0408: B9 F4 01                              	MOV CX,500
[ 429]    040B: E8 CF FF                              	CALL DELAY
[ 430]        :                                       	
[ 431]        :                                       ;38H represents the function set command for configuring the LCD module
[ 432]    040E: B4 38                                 	MOV AH,38H
[ 433]    0410: E8 0E 00                              	CALL LCD_CMD
[ 434]        :                                       	
[ 435]    0413: B4 0C                                 	MOV AH,0CH;turn on the display
[ 436]    0415: E8 09 00                              	CALL LCD_CMD
[ 437]        :                                       	
[ 438]    0418: E8 34 00                              	CALL LCD_CLEAR
[ 439]        :                                       	
[ 440]    041B: B4 06                                 	MOV AH,06H;configure the cursor movement
[ 441]    041D: E8 01 00                              	CALL LCD_CMD
[ 442]        :                                       	
[ 443]    0420: C3                                    	RET	
[ 444]        :                                       ENDP LCD_INIT
[ 445]        :                                       
[ 446]        :                                       ;sends commands to LCD
[ 447]    0421:                                       PROC LCD_CMD
[ 448]        :                                       ;input: AH = command code
[ 449]        :                                       ;output: none
[ 450]        :                                       
[ 451]        :                                       ;save registers
[ 452]    0421: 52                                    	PUSH DX  ;preserve their original values
[ 453]    0422: 50                                    	PUSH AX
[ 454]        :                                       ;make rs=0
[ 455]    0423: A0 4E 00                              	MOV AL,PORTB_VAL
[ 456]    0426: 24 FD                                 	AND AL,0FDH ;clears the bit just before the LSB (RS bit) of AL. RS=0
[ 457]    0428: E8 41 FE                              	CALL OUT_B
[ 458]        :                                       ;set out data pins
[ 459]    042B: 8A C4                                 	MOV AL,AH
[ 460]    042D: E8 35 FE                              	CALL OUT_A ;output the value of AL to the data pins of the LCD module
[ 461]        :                                       ;make En=1
[ 462]    0430: A0 4E 00                              	MOV AL,PORTB_VAL
[ 463]    0433: 0C 04                                 	OR	AL,100B		;set En=1
[ 464]    0435: E8 34 FE                              	CALL OUT_B
[ 465]        :                                       ;delay 1ms
[ 466]    0438: B9 32 00                              	MOV CX,50
[ 467]    043B: E8 9F FF                              	CALL DELAY
[ 468]        :                                       ;make En=0
[ 469]    043E: A0 4E 00                              	MOV AL,PORTB_VAL
[ 470]    0441: 24 FB                                 	AND AL,0FBH		;set En=0
[ 471]    0443: E8 26 FE                              	CALL OUT_B
[ 472]        :                                       ;delay 1ms
[ 473]    0446: B9 32 00                              	MOV CX,50
[ 474]    0449: E8 91 FF                              	CALL DELAY
[ 475]        :                                       ;restore registers
[ 476]    044C: 58                                    	POP AX  ; revert them to their original values
[ 477]    044D: 5A                                    	POP DX	
[ 478]    044E: C3                                    	RET
[ 479]        :                                       ENDP LCD_CMD
[ 480]        :                                       
[ 481]    044F:                                       PROC LCD_CLEAR
[ 482]    044F: B4 01                                 	MOV AH,1   ;clear screen
[ 483]    0451: E8 CD FF                              	CALL LCD_CMD
[ 484]    0454: C3                                    	RET	
[ 485]        :                                       ENDP LCD_CLEAR
[ 486]        :                                       
[ 487]        :                                       ;writes a character on current cursor position
[ 488]    0455:                                       PROC LCD_WRITE_CHAR
[ 489]        :                                       ;input: AH
[ 490]        :                                       ;output: none
[ 491]        :                                       
[ 492]        :                                       ;save registers
[ 493]    0455: 50                                    	PUSH AX
[ 494]        :                                       ;set RS=1
[ 495]    0456: A0 4E 00                              	MOV AL,PORTB_VAL
[ 496]    0459: 0C 02                                 	OR	AL,10B	
[ 497]    045B: E8 0E FE                              	CALL OUT_B
[ 498]        :                                       ;set out the data pins
[ 499]    045E: 8A C4                                 	MOV AL,AH
[ 500]    0460: E8 02 FE                              	CALL OUT_A
[ 501]        :                                       ;set En=1
[ 502]    0463: A0 4E 00                              	MOV AL,PORTB_VAL
[ 503]    0466: 0C 04                                 	OR	AL,100B		
[ 504]    0468: E8 01 FE                              	CALL OUT_B
[ 505]        :                                       ;delay 1ms
[ 506]    046B: B9 32 00                              	MOV CX,50
[ 507]    046E: E8 6C FF                              	CALL DELAY
[ 508]        :                                       ;set En=0
[ 509]    0471: A0 4E 00                              	MOV AL,PORTB_VAL
[ 510]    0474: 24 FB                                 	AND	AL,0FBH		
[ 511]    0476: E8 F3 FD                              	CALL OUT_B
[ 512]        :                                       ;return
[ 513]    0479: 58                                    	POP AX
[ 514]    047A: C3                                    	RET	
[ 515]        :                                       ENDP LCD_WRITE_CHAR
[ 516]        :                                       
[ 517]        :                                       ;prints a string on current cursor position
[ 518]    047B:                                       PROC LCD_PRINTSTR
[ 519]        :                                       ;input: SI=string address, string should end with '$'
[ 520]        :                                       ;output: none
[ 521]        :                                       
[ 522]        :                                       ;save registers
[ 523]    047B: 56                                    	PUSH SI
[ 524]    047C: 50                                    	PUSH AX
[ 525]        :                                       ;read and write character
[ 526]    047D:                                       	@LCD_PRINTSTR_LT:
[ 527]    047D: AC                                    		LODSB
[ 528]    047E: 3C 24                                 		CMP AL,'$'
[ 529]    0480: 74 07                                 		JE @LCD_PRINTSTR_EXIT
[ 530]    0482: 8A E0                                 		MOV AH,AL
[ 531]    0484: E8 CE FF                              		CALL LCD_WRITE_CHAR	
[ 532]    0487: EB F4                                 	JMP @LCD_PRINTSTR_LT
[ 533]        :                                       	
[ 534]        :                                       ;return
[ 535]    0489:                                       	@LCD_PRINTSTR_EXIT:
[ 536]    0489: 58                                    	POP AX
[ 537]    048A: 5E                                    	POP SI
[ 538]    048B: C3                                    	RET	
[ 539]        :                                       ENDP LCD_PRINTSTR
[ 540]        :                                       
[ 541]        :                                       ;sets the cursor
[ 542]    048C:                                       PROC LCD_SET_CUR
[ 543]        :                                       ;input: DL=ROW, DH=COL
[ 544]        :                                       ;		DL = 1, means upper row
[ 545]        :                                       ;		DL = 2, means lower row
[ 546]        :                                       ;		DH = 1-8, 1st column is 1
[ 547]        :                                       ;output: none
[ 548]        :                                       
[ 549]        :                                       ;save registers
[ 550]    048C: 50                                    	PUSH AX
[ 551]        :                                       ;LCD uses 0 based column index
[ 552]    048D: FE CE                                 	DEC DH
[ 553]        :                                       ;select case	
[ 554]    048F: 80 FA 01                              	CMP DL,1
[ 555]    0492: 74 07                                 	JE	@ROW1
[ 556]    0494: 80 FA 02                              	CMP DL,2
[ 557]    0497: 74 06                                 	JE	@ROW2
[ 558]    0499: EB 0D                                 	JMP @LCD_SET_CUR_END
[ 559]        :                                       	
[ 560]        :                                       ;if DL==1 then
[ 561]    049B:                                       	@ROW1:
[ 562]    049B: B4 80                                 		MOV AH,80H
[ 563]    049D: EB 04                                 	JMP @LCD_SET_CUR_ENDCASE
[ 564]        :                                       	
[ 565]        :                                       ;if DL==2 then
[ 566]    049F:                                       	@ROW2:
[ 567]    049F: B4 C0                                 		MOV AH,0C0H
[ 568]    04A1: EB 00                                 	JMP @LCD_SET_CUR_ENDCASE
[ 569]        :                                       		
[ 570]        :                                       ;execute the command
[ 571]    04A3:                                       	@LCD_SET_CUR_ENDCASE:	
[ 572]    04A3: 02 E6                                 	ADD AH,DH
[ 573]    04A5: E8 79 FF                              	CALL LCD_CMD
[ 574]        :                                       	
[ 575]        :                                       ;exit from procedure
[ 576]    04A8:                                       	@LCD_SET_CUR_END:
[ 577]    04A8: 58                                    	POP AX
[ 578]    04A9: C3                                    	RET
[ 579]        :                                       ENDP LCD_SET_CUR
[ 580]        :                                       
[ 581]        :                                       
[ 582]        :                                       
[ 583]        :                                       CODE ENDS ;end of CODE segment
[ 584]        :                                       END START ; set entry point and stop the assembler.
[ 585]        :                                       
[ 586]        :                                       
[ 587]        :                                       
[ 588]        :                                       
[ 589]        :                                       
[ 590]        :                                       
[ 591]        :                                       
 
===================================================================================================
 
EXE HEADER - bytes from 0000 to 01FF inclusive.

0000: 4D      -   exe signature (M)
0001: 5A      -   exe signature (Z)
0002: AA      -   bytes on last page (l.byte)
0003: 00      -   bytes on last page (h.byte)
0004: 04      -   512 byte pages in file (l.byte)
0005: 00      -   512 byte pages in file (h.byte)
0006: 01      -   relocations (l.byte)
0007: 00      -   relocations (h.byte)
0008: 20      -   paragraphs in header (l.byte)
0009: 00      -   paragraphs in header (h.byte)
000A: 00      -   minimum memory (l.byte)
000B: 00      -   minimum memory (h.byte)
000C: FF      -   maximum memory (l.byte)
000D: FF      -   maximum memory (h.byte)
000E: 06      -   SS - stack segment (l.byte)
000F: 00      -   SS - stack segment (h.byte)
0010: 00      -   SP - stack pointer (l.byte)
0011: 01      -   SP - stack pointer (h.byte)
0012: 97      -   check sum (l.byte)
0013: 57      -   check sum (h.byte)
0014: 00      -   IP - instruction pointer (l.byte)
0015: 00      -   IP - instruction pointer (h.byte)
0016: 16      -   CS - code segment (l.byte)
0017: 00      -   CS - code segment (h.byte)
0018: 1E      -   relocation table adress (l.byte)
0019: 00      -   relocation table adress (h.byte)
001A: 00      -   overlay number (l.byte)
001B: 00      -   overlay number (h.byte)
001C: 01      -   signature (l.byte)
001D: 00      -   signature (h.byte)
001E: 10      -   relocation table - offset inside segment (l.byte)
001F: 00      -   relocation table - offset inside segment (h.byte)
0020: 16      -   relocation table - segment anchor (l.byte)
0021: 00      -   relocation table - segment anchor (h.byte)
0022 to 01FF  -   reserved relocation area  (00) 




===================================================================================================
